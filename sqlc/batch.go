// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: batch.go
package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5"
)

const insertAuthors = `-- name: InsertAuthors :batchone
INSERT INTO authors (name)
VALUES ($1)
RETURNING id
`

type InsertAuthorsBatchResults struct {
	br  pgx.BatchResults
	ind int
}

func (q *Queries) InsertAuthors(ctx context.Context, name []string) *InsertAuthorsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range name {
		vals := []interface{}{
			a,
		}
		batch.Queue(insertAuthors, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InsertAuthorsBatchResults{br, 0}
}

func (b *InsertAuthorsBatchResults) QueryRow(f func(int, int32, error)) {
	for {
		row := b.br.QueryRow()
		var id int32
		err := row.Scan(&id)
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, id, err)
		}
		b.ind++
	}
}

func (b *InsertAuthorsBatchResults) Close() error {
	return b.br.Close()
}
